<expression>        ::= <pipe_expr>
                   |  <match_expr>
                   |  <for_expr>
                   |  <let_expr>
                   |  <atom>
                   |  <function_expr>
                   |  <record_expr>

<record_expr>       ::= "{" <field> { "," <field> } "}"
<field>             ::= <ident> ":" <expression>

<access_expr>       ::= <ident> "." <ident>

<let_expr>          ::= "let" <ident> "=" <expression>
<let_stmt>          ::= "let" <ident> "=" <expression>

<for_expr>          ::= "for" <ident> "in" <expression> "->" <expression>
<for_stmt>          ::= "for" <ident> "in" <expression> "->" <expression>

<pipe_expr>         ::= <application> { "|>" <function_expr> }

<application>       ::= <atom> { <atom> }

<function_expr>     ::= <lambda_expr>
                 |    <ident>
                 |    "(" <expression> ")"

<lambda_expr>       ::= <ident> "->" <expression>

<atom>              ::= <literal>
                 |    <ident>
                 |    "(" <expression> ")"
                 |    <function>
                 |    <list>
                 |    <tuple>
                 |    <if_expr>
                 |    <record_expr>
                 |    <access_expr>

<match_expr>        ::= "match" <expression> { "|" <pattern> "->" <expression> }

<pattern>           ::= <literal>
                 |    <ident>
                 |    "(" <pattern> { "," <pattern> } ")"
                 |    "_"

<literal>           ::= <number>
                 |    <string>
                 |    <boolean>

<ident>             ::= <ident_start> { <ident_continue> }

<ident_start>       ::= <letter> | "_"
<ident_continue>    ::= <letter> | <digit> | "_"
