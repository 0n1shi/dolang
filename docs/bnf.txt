<stmt>                  ::= <let_stmt>
                          | <expr_stmt>
<let_stmt>              ::= "let" <id> "=" <expr>
<print_stmt>            ::= "print" <expr>
<expr_stmt>             ::= <expr>

<expr>          ::= <lambda_expr>
                  | <if_expr>
                  | <match_expr>
                  | <list>
                  | <tuple>
                  | <let_stmt>
                  | <logi_expr>

<lambda_expr>   ::= ( <args> "->" <expr> )
                  | ( <arg> "->" <expr> )
<arg>           ::= <ident>
<args>          ::= "(" <identifier> { "," <identifier> } ")"

<if_expr>   ::= "if" <expr> "then" <expr> "else" <expr>

<match_expr>    ::= "match" <expr> { "|" <pattern> "->" <expr> }
<pattern>       ::= <literal>
                  | <identifier>
                  | "(" <pattern> { "," <pattern> } ")"
                  | "_"

<list>  ::= "[" [ <expr> { "," <expr> } ] "]"
<tuple> ::= "(" <expr> "," <expr> { "," <expr> } ")"

<logic_expr>    ::= <comp_expr> { ("and" | "or") <comp_expr> }
<comp_expr>     ::= <term_expr> { ("==" | "!=" | "<" | "<=" | ">" | ">=") <term_expr> }
<term_expr>     ::= <factor_expr> { ("+" | "-") <factor_expr> }
<factor_expr>  ::= <unary_expr> { ("*" | "/" | "%") <unary_expr> }
<unary_expr>    ::= ( "-" | "not") <unary_expr>
                  | <call_expr>
<call_expr>     ::= <identifier> "(" { <expr> { "," <expr> } } ")"

<identifier>    ::= ( <letter> | "_" ) { <letter> | <digit> | "_" }
<primary>      ::= <literal>
                  | <identifier>
                  | "(" <expr> ")"
<literal>       ::= <number>
                  | <string>
                  | "true"
                  | "false"
