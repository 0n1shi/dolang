<expression>                ::= <comparison_expression>

<comparison_expression>     ::= <additive_expression> { ("==" | "!=" | "<" | ">" | "<=" | ">=") <additive_expression> }
<additive_expression>       ::= <multiplicative_expression> { ("+" | "-") <multiplicative_expression> }
<multiplicative_expression> ::= <pipe_expression> { ("*" | "/" | "%") <pipe_expression> }
<pipe_expression>           ::= <application> { "|>" <function_expression> }
<application>               ::= <range_expression> { <simple_expression> }
<range_expression>          ::= <simple_expression> [ ".." <simple_expression> ]

<simple_expression>         ::= <match_expression>
                              | <for_expression>
                              | <let_expression>
                              | <function_expression>
                              | <record_expression>
                              | <access_expression>
                              | <list>
                              | <tuple>
                              | <if_expression>
                              | <literal>
                              | <identifier>
                              | "(" <expression> ")"

<lambda_expression>         ::= <simple_pattern> "->" <expression>
<match_expression>          ::= "match" <expression> { "|" <pattern> "->" <expression> }
<for_expression>            ::= "for" <identifier> "in" <expression> "->" <expression>
<let_expression>            ::= "let" <identifier> "=" <expression>
<record_expression>         ::= "{" <field> { "," <field> } "}"
<field>                     ::= <identifier> ":" <expression>
<access_expression>         ::= <simple_expression> "." <identifier>
<list>                      ::= "[" [ <expression> { "," <expression> } ] "]"
<tuple>                     ::= "(" <expression> "," <expression> { "," <expression> } ")"

<pattern>                   ::= <literal>
                              | <identifier>
                              | "(" <pattern> { "," <pattern> } ")"
                              | "_"
<simple_pattern>            ::= <identifier>
                              | "(" <simple_pattern> { "," <simple_pattern> } ")"
                              | "_"

<literal>                   ::= <number> | <string> | <boolean>
<identifier>                ::= ( <letter> | "_" ) { <letter> | <digit> | "_" }
