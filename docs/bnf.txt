<expression>        ::= <comparison_expr>

<comparison_expr>   ::= <additive_expr> { ("==" | "!=" | "<" | ">" | "<=" | ">=") <additive_expr> }

<additive_expr>     ::= <multiplicative_expr> { ("+" | "-") <multiplicative_expr> }

<multiplicative_expr> ::= <pipe_expr> { ("*" | "/" | "%") <pipe_expr> }

<pipe_expr>         ::= <application> { "|>" <function_expr> }

<application>       ::= <range_expr> { <atom> }

<range_expr>        ::= <simple_expr> [ ".." <simple_expr> ]

<simple_expr>       ::= <match_expr>
                    |   <for_expr>
                    |   <let_expr>
                    |   <function_expr>
                    |   <record_expr>
                    |   <atom>

<function_expr>     ::= <lambda_expr>
                    |   <identifier>
                    |   "(" <expression> ")"

<lambda_expr>       ::= <identifier> "->" <expression>

<match_expr>        ::= "match" <expression> { "|" <pattern> "->" <expression> }

<for_expr>          ::= "for" <identifier> "in" <expression> "->" <expression>

<let_expr>          ::= "let" <identifier> "=" <expression>

<atom>              ::= <literal>
                    |   <identifier>
                    |   "(" <expression> ")"
                    |   <function>
                    |   <list>
                    |   <tuple>
                    |   <if_expr>
                    |   <record_expr>
                    |   <access_expr>

<record_expr>       ::= "{" <field> { "," <field> } "}"
<field>             ::= <identifier> ":" <expression>

<access_expr>       ::= <identifier> "." <identifier>

<pattern>           ::= <literal>
                    |   <identifier>
                    |   "(" <pattern> { "," <pattern> } ")"
                    |   "_"

<literal>           ::= <number>
                    |   <string>
                    |   <boolean>

<identifier>        ::= ( <letter> | "_" ) { <letter> | <digit> | "_" }
