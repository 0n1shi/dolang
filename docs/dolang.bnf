<stmt>          ::= <let_stmt>
                  | <expr_stmt>
<let_stmt>      ::= "let" <id> "=" <expr>
<expr_stmt>     ::= <expr>

<expr>  ::= <lambda_expr>
          | <if_expr>
          | <match_expr>
          | <list>
          | <logic_expr>

<lambda_expr>   ::= fn "_" "->" <expr>
                  | fn <params> "->" <expr>
<params>        ::= <expr> { "," <expr> }

<if_expr>   ::= "if" <expr> "then" <expr> "else" <expr>

<match_expr>    ::= "match" <expr> { "|" <pattern> "->" <expr> }
<pattern>       ::= <literal>
                  | <identifier>
                  | "(" <pattern> { "," <pattern> } ")"
                  | "_"

<list>  ::= "[" [ <expr> { "," <expr> } ] "]"

<logic_expr>    ::= <comp_expr> { ("and" | "or") <comp_expr> }
<comp_expr>     ::= <range_expr> { ("==" | "!=" | "<" | "<=" | ">" | ">=") <range_expr> }
<range_expr>   ::= <term_expr> { ".." <term_expr> }
<term_expr>     ::= <factor_expr> { ("+" | "-") <factor_expr> }
<factor_expr>   ::= <unary_expr> { ("*" | "/" | "%") <unary_expr> }
<unary_expr>    ::= ( "-" | "not") <unary_expr>
                  | <postfix_expr>
<postfix_expr>  ::= <primary> { <postfix> }

<postfix>   ::= <call>
              | <index>
              | <slice>

<call>  ::= "(" [ <expr> { "," <expr> } ] ")"
<index> ::= "[" <expr> "]"
<slice> ::= "[" [<expr>] ".." [<expr>] "]"

<primary>   ::= <literal>
              | <identifier>
              | "(" <expr> ")"

<identifier>    ::= ( <letter> | "_" ) { <letter> | <digit> | "_" }
<literal>       ::= <number>
                  | <string>
                  | "true"
                  | "false"
